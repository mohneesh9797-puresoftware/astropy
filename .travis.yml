# We set the language to c because python isn't supported on the MacOS X nodes
# on Travis. However, the language ends up being irrelevant anyway, since we
# install Python ourselves using conda.
language: c

compiler: gcc

# Cache can be cleared from the travis settings menu, see docs currently at
# https://docs.travis-ci.com/user/caching#Clearing-Caches
cache:
  - ccache

os:
    - linux

stage: Comprehensive tests

# Setting sudo to false opts in to Travis-CI container-based builds.
sudo: false

# The apt packages below are needed for sphinx builds, which can no longer
# be installed with sudo apt-get.
# tzdata is included to ensure system leap seconds are up to date.
addons:
    apt:
        packages:
            - graphviz
            - language-pack-de
            - tzdata

env:
    global:
        # Set defaults to avoid repeating in most cases
        - PYTHON_VERSION=3.6
        - NUMPY_VERSION=stable
        - MAIN_CMD='python setup.py'
        - CONDA_DEPENDENCIES='Cython jinja2'
        - CONDA_ALL_DEPENDENCIES='Cython jinja2 scipy h5py matplotlib pyyaml pandas pytz html5lib beautifulsoup4 ipython mpmath bleach bottleneck'
        - DEV_PIP_DEP='asdf>=2.3 Cython jinja2 scipy h5py matplotlib pyyaml scikit-image pandas pytz html5lib beautifulsoup4 ipython mpmath bleach bottleneck'
        - ASDF_PIP_DEP='asdf>=2.3'
        - SETUP_XVFB=True
        - EVENT_TYPE='push pull_request'
        - SETUP_CMD='test'
        - INSTALL_WITH_PIP=False
        - PIP_FLAGS=""
        - EXTRAS_INSTALL=""
        # Run test suite twice in a row without cleaning
        - DOUBLE_PLAY=False
        - USE_CI_HELPERS=True
        # Use this for the dependencies when not using ci-helpers
        - OTHER_DEPENDENCY_PREFERENCES=''

        # PEP8 errors/warnings:
        # E101 - mix of tabs and spaces
        # W191 - use of tabs
        # W291 - trailing whitespace
        # W292 - no newline at end of file
        # W293 - trailing whitespace
        # W391 - blank line at end of file
        # E111 - 4 spaces per indentation level
        # E112 - 4 spaces per indentation level
        # E113 - 4 spaces per indentation level
        # E301 - expected 1 blank line, found 0
        # E302 - expected 2 blank lines, found 0
        # E303 - too many blank lines (3)
        # E304 - blank lines found after function decorator
        # E305 - expected 2 blank lines after class or function definition
        # E306 - expected 1 blank line before a nested definition
        # E502 - the backslash is redundant between brackets
        # E722 - do not use bare except
        # E901 - SyntaxError or IndentationError
        # E902 - IOError
        # E999: SyntaxError -- failed to compile a file into an Abstract Syntax Tree
        # # F821: undefined name  # Note: Removed for now because of heavy use of units.si
        #Â F822: undefined name in __all__
        # F823: local variable name referenced before assignment
        - FLAKE8_OPT="--select=E101,W191,W291,W292,W293,W391,E111,E112,E113,E30,E502,E722,E901,E902,E999,F822,F823"

stages:
   # Do the style check and a single test job, don't proceed if it fails
   - name: Initial tests
   # Do the rest of the tests
   - name: Comprehensive tests
   - name: Final tests
   - name: Cron tests
     if: type = cron

matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:

        - os: linux
          env: PYTHON_VERSION=3.7 NUMPY_VERSION=1.16
               INSTALL_CMD='python setup.py build_ext --inplace'
               PIP_DEPENDENCIES='pytest-astropy'
               TEST_CMD='pytest --open-files --doctest-rst'
          script:
            - $INSTALL_CMD
            - $TEST_CMD
        -  os: linux
           arch: arm64
           env: PYTHON_VERSION=3.7 NUMPY_VERSION=1.16
                INSTALL_CMD='python setup.py build_ext --inplace'
                PIP_DEPENDENCIES='pytest-astropy'
                TEST_CMD='pytest --open-files --doctest-rst'
           script:
             - $INSTALL_CMD
             - $TEST_CMD

        # Now try with all optional dependencies. We also include the --readonly
        # flag to make sure no files are being written to the temporary install
        # location during testing. We also use this build to make sure that the
        # dependencies get correctly installed with pip.
 
before_install:

    # We need to use CCOMPILER otherwise Travis overwrites CC if we define it
    # in env: above.
    - if [ ! -z $CCOMPILER ]; then
        export CC=$CCOMPILER;
      fi

     # Check CC variable
    - echo $CC

    # Write configuration items to standard location to make sure they are
    # ignored (the tests will fail if not)
    - mkdir -p $HOME/.astropy/config/
    - printf "unicode_output = True\nmax_width = 500" > $HOME/.astropy/config/astropy.cfg


install:
    - if [[ $USE_CI_HELPERS == True ]]; then
        git clone git://github.com/mohneesh9797-puresoftware/ci-helpers.git;
        source ci-helpers/travis/setup_conda.sh;
      fi
    - if [[ $INSTALL_WITH_PIP == True ]]; then
        if [ -z $EXTRAS_INSTALL ]; then
          pip install -e . ${OTHER_DEPENDENCY_PREFERENCES} ${PIP_FLAGS};
        else
          pip install -e .[$EXTRAS_INSTALL] ${OTHER_DEPENDENCY_PREFERENCES} ${PIP_FLAGS};
        fi
      fi

script:
    - if [[ $DOUBLE_PLAY == True ]]; then
          $MAIN_CMD $SETUP_CMD;
          $MAIN_CMD $SETUP_CMD;
      else
          $MAIN_CMD $SETUP_CMD;
      fi

after_success:
    - if [[ $SETUP_CMD == *--coverage* ]]; then
        codecov --gcov-glob "*cextern*";
      fi
